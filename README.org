#+TITLE: funfact
#+OPTIONS: toc:nil num:nil
#+PROPERTY: header-args:R :session *R*

funfact is an R package designed to simplify the planning and analysis of factorially designed experiments.  It is intended for use with experiments in which multiple stimulus items are presented to multiple subjects.

funfact can be used for the following purposes:

- generating counterbalanced stimulus lists for any arbitrary
  experimental design;
- generating a full list of trials corresponding to the realization of an experiment;
- simulating data for any type of full factorial design;
- generating a design formula for use in mixed model analysis in =lme4=.

Each of these purposes is illustrated in one of the sections below.

To install funfact, type the following commands into the R console:

#+BEGIN_SRC R :eval never :exports code
library("devtools")
install_github("dalejbarr/funfact")
#+END_SRC

** funfact basics

funfact conceptually separates the /design/ of an experiment from the /realization/ of that experiment through the sampling of subjects.  

The design of an experiment is represented using a list object with the following named elements:

| Element Name   | Description                                                                                  |
|----------------+----------------------------------------------------------------------------------------------|
| =ivs=          | Names and levels of the independent variables (IVs) that form the main factors in the design |
| =between_subj= | Names of any IVs administered between subjects                                               |
| =between_item= | Names of any IVs administered between items                                                  |
| =n_item=       | Number of stimulus items                                                                     |
| =n_rep=        | Number of times each item should be presented to each participant (default 1)                |

For information on how these elements should be defined, see the examples in the next section.

** Generating counterbalanced stimulus presentation lists

#+BEGIN_SRC R :exports none
  library("funfact")
#+END_SRC

The function =stim_lists()= generates a set of counterbalanced
stimulus presentation lists for any given (full) factorial design.  A
"stimulus presentation list" determines which items will be presented
to a given subject, and in which condition.  The generation process ensures that each subject seems the same number of items, and the same number of items in each condition, and also that each item is presented the same number of times in each condition across subjects.

You determine the experiment design by specifying arguments within a list object.

*** A 2x2 design with both factors within-subjects and within-items

#+BEGIN_SRC R :results value :colnames yes
  ## 2x2 within-subject within-item factorial design
  ## NB: here, the two IVs are A and B, each having 2 levels
  wswi_design <- list(ivs = c(A = 2, B = 2),
                      n_item = 8)

  stim_lists(wswi_design)
#+END_SRC

#+RESULTS:
| list_id | item_id | A  | B  |
|---------+---------+----+----|
|       1 |       1 | A1 | B1 |
|       1 |       2 | A1 | B1 |
|       1 |       3 | A1 | B2 |
|       1 |       4 | A1 | B2 |
|       1 |       5 | A2 | B1 |
|       1 |       6 | A2 | B1 |
|       1 |       7 | A2 | B2 |
|       1 |       8 | A2 | B2 |
|       2 |       1 | A1 | B2 |
|       2 |       2 | A1 | B2 |
|       2 |       3 | A2 | B1 |
|       2 |       4 | A2 | B1 |
|       2 |       5 | A2 | B2 |
|       2 |       6 | A2 | B2 |
|       2 |       7 | A1 | B1 |
|       2 |       8 | A1 | B1 |
|       3 |       1 | A2 | B1 |
|       3 |       2 | A2 | B1 |
|       3 |       3 | A2 | B2 |
|       3 |       4 | A2 | B2 |
|       3 |       5 | A1 | B1 |
|       3 |       6 | A1 | B1 |
|       3 |       7 | A1 | B2 |
|       3 |       8 | A1 | B2 |
|       4 |       1 | A2 | B2 |
|       4 |       2 | A2 | B2 |
|       4 |       3 | A1 | B1 |
|       4 |       4 | A1 | B1 |
|       4 |       5 | A1 | B2 |
|       4 |       6 | A1 | B2 |
|       4 |       7 | A2 | B1 |
|       4 |       8 | A2 | B1 |

*** A more complicated, two-way mixed design

#+BEGIN_SRC R :results value :colnames yes
  mixed_design <- list(ivs = c(A = 2, B = 2),
                       between_subj = c("A"),
                       between_item = c("B"),
                       n_item = 8)

  stim_lists(mixed_design)
#+END_SRC

#+RESULTS:
| list_id | item_id | A  | B  |
|---------+---------+----+----|
|       1 |       1 | A1 | B1 |
|       1 |       2 | A1 | B1 |
|       1 |       3 | A1 | B1 |
|       1 |       4 | A1 | B1 |
|       1 |       5 | A1 | B2 |
|       1 |       6 | A1 | B2 |
|       1 |       7 | A1 | B2 |
|       1 |       8 | A1 | B2 |
|       2 |       1 | A2 | B1 |
|       2 |       2 | A2 | B1 |
|       2 |       3 | A2 | B1 |
|       2 |       4 | A2 | B1 |
|       2 |       5 | A2 | B2 |
|       2 |       6 | A2 | B2 |
|       2 |       7 | A2 | B2 |
|       2 |       8 | A2 | B2 |

*** A 2x3 design, one factor between

#+BEGIN_SRC R :export value :colnames yes
  ## note that IVs can also be specified as elements of a list, each
  ## key/value pair being the variable name and a vector with the levels
  ## of that variable
  bswi_2by3 <- list(ivs = list(Group = c("Child", "Adult"),
                        Condition = c("Control", "High", "Low")),
                    between_subj = c("Group"),
                    n_item = 6)

  stim_lists(bswi_2by3)
#+END_SRC

#+RESULTS:
| list_id | item_id | Group | Condition |
|---------+---------+-------+-----------|
|       1 |       1 | Child | Control   |
|       1 |       2 | Child | Control   |
|       1 |       3 | Child | High      |
|       1 |       4 | Child | High      |
|       1 |       5 | Child | Low       |
|       1 |       6 | Child | Low       |
|       2 |       1 | Child | High      |
|       2 |       2 | Child | High      |
|       2 |       3 | Child | Low       |
|       2 |       4 | Child | Low       |
|       2 |       5 | Child | Control   |
|       2 |       6 | Child | Control   |
|       3 |       1 | Child | Low       |
|       3 |       2 | Child | Low       |
|       3 |       3 | Child | Control   |
|       3 |       4 | Child | Control   |
|       3 |       5 | Child | High      |
|       3 |       6 | Child | High      |
|       4 |       1 | Adult | Control   |
|       4 |       2 | Adult | Control   |
|       4 |       3 | Adult | High      |
|       4 |       4 | Adult | High      |
|       4 |       5 | Adult | Low       |
|       4 |       6 | Adult | Low       |
|       5 |       1 | Adult | High      |
|       5 |       2 | Adult | High      |
|       5 |       3 | Adult | Low       |
|       5 |       4 | Adult | Low       |
|       5 |       5 | Adult | Control   |
|       5 |       6 | Adult | Control   |
|       6 |       1 | Adult | Low       |
|       6 |       2 | Adult | Low       |
|       6 |       3 | Adult | Control   |
|       6 |       4 | Adult | Control   |
|       6 |       5 | Adult | High      |
|       6 |       6 | Adult | High      |

*** A 3-way mixed design

The design below is a 3-way design based on Gann & Barr (2014).

#+BEGIN_SRC R :colnames yes :results value
  threeway <- list(ivs = list(Novelty = c("New", "Old"),
                       Addressee = c("Same", "Diff"),
                       Feedback = c("Yes", "No")),
                   between_subj = c("Addressee"),
									 between_item = c("Feedback"),
                   n_item = 16)

  stim_lists(threeway)
#+END_SRC

#+RESULTS:
| list_id | item_id | Addressee | Feedback | Novelty |
|---------+---------+-----------+----------+---------|
|       1 |       1 | Same      | Yes      | New     |
|       1 |       2 | Same      | Yes      | New     |
|       1 |       3 | Same      | Yes      | New     |
|       1 |       4 | Same      | Yes      | New     |
|       1 |       5 | Same      | Yes      | Old     |
|       1 |       6 | Same      | Yes      | Old     |
|       1 |       7 | Same      | Yes      | Old     |
|       1 |       8 | Same      | Yes      | Old     |
|       1 |       9 | Same      | No       | New     |
|       1 |      10 | Same      | No       | New     |
|       1 |      11 | Same      | No       | New     |
|       1 |      12 | Same      | No       | New     |
|       1 |      13 | Same      | No       | Old     |
|       1 |      14 | Same      | No       | Old     |
|       1 |      15 | Same      | No       | Old     |
|       1 |      16 | Same      | No       | Old     |
|       2 |       1 | Same      | Yes      | Old     |
|       2 |       2 | Same      | Yes      | Old     |
|       2 |       3 | Same      | Yes      | Old     |
|       2 |       4 | Same      | Yes      | Old     |
|       2 |       5 | Same      | Yes      | New     |
|       2 |       6 | Same      | Yes      | New     |
|       2 |       7 | Same      | Yes      | New     |
|       2 |       8 | Same      | Yes      | New     |
|       2 |       9 | Same      | No       | Old     |
|       2 |      10 | Same      | No       | Old     |
|       2 |      11 | Same      | No       | Old     |
|       2 |      12 | Same      | No       | Old     |
|       2 |      13 | Same      | No       | New     |
|       2 |      14 | Same      | No       | New     |
|       2 |      15 | Same      | No       | New     |
|       2 |      16 | Same      | No       | New     |
|       3 |       1 | Diff      | Yes      | New     |
|       3 |       2 | Diff      | Yes      | New     |
|       3 |       3 | Diff      | Yes      | New     |
|       3 |       4 | Diff      | Yes      | New     |
|       3 |       5 | Diff      | Yes      | Old     |
|       3 |       6 | Diff      | Yes      | Old     |
|       3 |       7 | Diff      | Yes      | Old     |
|       3 |       8 | Diff      | Yes      | Old     |
|       3 |       9 | Diff      | No       | New     |
|       3 |      10 | Diff      | No       | New     |
|       3 |      11 | Diff      | No       | New     |
|       3 |      12 | Diff      | No       | New     |
|       3 |      13 | Diff      | No       | Old     |
|       3 |      14 | Diff      | No       | Old     |
|       3 |      15 | Diff      | No       | Old     |
|       3 |      16 | Diff      | No       | Old     |
|       4 |       1 | Diff      | Yes      | Old     |
|       4 |       2 | Diff      | Yes      | Old     |
|       4 |       3 | Diff      | Yes      | Old     |
|       4 |       4 | Diff      | Yes      | Old     |
|       4 |       5 | Diff      | Yes      | New     |
|       4 |       6 | Diff      | Yes      | New     |
|       4 |       7 | Diff      | Yes      | New     |
|       4 |       8 | Diff      | Yes      | New     |
|       4 |       9 | Diff      | No       | Old     |
|       4 |      10 | Diff      | No       | Old     |
|       4 |      11 | Diff      | No       | Old     |
|       4 |      12 | Diff      | No       | Old     |
|       4 |      13 | Diff      | No       | New     |
|       4 |      14 | Diff      | No       | New     |
|       4 |      15 | Diff      | No       | New     |
|       4 |      16 | Diff      | No       | New     |


** Generating trial lists

While stimulus presentation lists determine which items a subject sees in which condition, trial lists randomly assign an equal number of subjects to each list.

#+BEGIN_SRC R :colnames yes
  wswi_design <- list(ivs = c(A = 2, B = 2),
                      n_item = 8)

  trial_lists(wswi_design, subjects = 8)
#+END_SRC

#+RESULTS:
| subj_id | list_id | item_id | A  | B  |
|---------+---------+---------+----+----|
|       1 |       2 |       1 | A1 | B2 |
|       1 |       2 |       2 | A1 | B2 |
|       1 |       2 |       3 | A2 | B1 |
|       1 |       2 |       4 | A2 | B1 |
|       1 |       2 |       5 | A2 | B2 |
|       1 |       2 |       6 | A2 | B2 |
|       1 |       2 |       7 | A1 | B1 |
|       1 |       2 |       8 | A1 | B1 |
|       2 |       4 |       1 | A2 | B2 |
|       2 |       4 |       2 | A2 | B2 |
|       2 |       4 |       3 | A1 | B1 |
|       2 |       4 |       4 | A1 | B1 |
|       2 |       4 |       5 | A1 | B2 |
|       2 |       4 |       6 | A1 | B2 |
|       2 |       4 |       7 | A2 | B1 |
|       2 |       4 |       8 | A2 | B1 |
|       3 |       2 |       1 | A1 | B2 |
|       3 |       2 |       2 | A1 | B2 |
|       3 |       2 |       3 | A2 | B1 |
|       3 |       2 |       4 | A2 | B1 |
|       3 |       2 |       5 | A2 | B2 |
|       3 |       2 |       6 | A2 | B2 |
|       3 |       2 |       7 | A1 | B1 |
|       3 |       2 |       8 | A1 | B1 |
|       4 |       3 |       1 | A2 | B1 |
|       4 |       3 |       2 | A2 | B1 |
|       4 |       3 |       3 | A2 | B2 |
|       4 |       3 |       4 | A2 | B2 |
|       4 |       3 |       5 | A1 | B1 |
|       4 |       3 |       6 | A1 | B1 |
|       4 |       3 |       7 | A1 | B2 |
|       4 |       3 |       8 | A1 | B2 |
|       5 |       3 |       1 | A2 | B1 |
|       5 |       3 |       2 | A2 | B1 |
|       5 |       3 |       3 | A2 | B2 |
|       5 |       3 |       4 | A2 | B2 |
|       5 |       3 |       5 | A1 | B1 |
|       5 |       3 |       6 | A1 | B1 |
|       5 |       3 |       7 | A1 | B2 |
|       5 |       3 |       8 | A1 | B2 |
|       6 |       1 |       1 | A1 | B1 |
|       6 |       1 |       2 | A1 | B1 |
|       6 |       1 |       3 | A1 | B2 |
|       6 |       1 |       4 | A1 | B2 |
|       6 |       1 |       5 | A2 | B1 |
|       6 |       1 |       6 | A2 | B1 |
|       6 |       1 |       7 | A2 | B2 |
|       6 |       1 |       8 | A2 | B2 |
|       7 |       1 |       1 | A1 | B1 |
|       7 |       1 |       2 | A1 | B1 |
|       7 |       1 |       3 | A1 | B2 |
|       7 |       1 |       4 | A1 | B2 |
|       7 |       1 |       5 | A2 | B1 |
|       7 |       1 |       6 | A2 | B1 |
|       7 |       1 |       7 | A2 | B2 |
|       7 |       1 |       8 | A2 | B2 |
|       8 |       4 |       1 | A2 | B2 |
|       8 |       4 |       2 | A2 | B2 |
|       8 |       4 |       3 | A1 | B1 |
|       8 |       4 |       4 | A1 | B1 |
|       8 |       4 |       5 | A1 | B2 |
|       8 |       4 |       6 | A1 | B2 |
|       8 |       4 |       7 | A2 | B1 |
|       8 |       4 |       8 | A2 | B1 |

** Simulating data from a factorial design

The functions =gen_pop()= and =sim_norm()= can be used to simulate data from any type of factorial design.

=gen_pop()= is used to generate population parameters to be used in the simulation.  =sim_norm()= takes a sample from the population defined by =gen_pop()=, as the example below illustrates.

#+BEGIN_SRC R :colnames yes
  my_design <- list(ivs = c(A = 2, B = 2),
                    n_item = 8)
  popdata <- gen_pop(my_design, 8)

  my_data <- sim_norm(my_design, 8, popdata)
  my_data
#+END_SRC

#+RESULTS:
| subj_id | list_id | item_id | A  | B  |                  Y |
|---------+---------+---------+----+----+--------------------|
|       1 |       2 |       1 | A1 | B2 |   1.18600864431848 |
|       1 |       2 |       2 | A1 | B2 |   2.19650762624285 |
|       1 |       2 |       3 | A2 | B1 |  0.078133933193419 |
|       1 |       2 |       4 | A2 | B1 |   1.88195186566249 |
|       1 |       2 |       5 | A2 | B2 |   1.74439667961584 |
|       1 |       2 |       6 | A2 | B2 |  0.470407667208009 |
|       1 |       2 |       7 | A1 | B1 |   2.51912645121071 |
|       1 |       2 |       8 | A1 | B1 |   2.73964717605434 |
|       2 |       1 |       1 | A1 | B1 | -0.683713178385101 |
|       2 |       1 |       2 | A1 | B1 |   4.77150835964478 |
|       2 |       1 |       3 | A1 | B2 | 0.0802398798730475 |
|       2 |       1 |       4 | A1 | B2 |  -2.37132166411036 |
|       2 |       1 |       5 | A2 | B1 |   1.15512845339793 |
|       2 |       1 |       6 | A2 | B1 |   1.85556183162729 |
|       2 |       1 |       7 | A2 | B2 |   2.70712977022336 |
|       2 |       1 |       8 | A2 | B2 |   4.89597462765518 |
|       3 |       3 |       1 | A2 | B1 |   2.00232734810404 |
|       3 |       3 |       2 | A2 | B1 |   2.10402258686101 |
|       3 |       3 |       3 | A2 | B2 |   3.62324588303818 |
|       3 |       3 |       4 | A2 | B2 |   4.56353936813392 |
|       3 |       3 |       5 | A1 | B1 | -0.291744260820948 |
|       3 |       3 |       6 | A1 | B1 |   2.84612787456946 |
|       3 |       3 |       7 | A1 | B2 | -0.225686248361752 |
|       3 |       3 |       8 | A1 | B2 | -0.946763706208223 |
|       4 |       4 |       1 | A2 | B2 |   1.29117832529211 |
|       4 |       4 |       2 | A2 | B2 |   4.89207230601347 |
|       4 |       4 |       3 | A1 | B1 | 0.0978992480601388 |
|       4 |       4 |       4 | A1 | B1 |   2.56249616518278 |
|       4 |       4 |       5 | A1 | B2 |   2.66838987412273 |
|       4 |       4 |       6 | A1 | B2 |  -1.79901521573805 |
|       4 |       4 |       7 | A2 | B1 |  0.140685433517426 |
|       4 |       4 |       8 | A2 | B1 |   1.70401022002006 |
|       5 |       4 |       1 | A2 | B2 |    4.1815507283982 |
|       5 |       4 |       2 | A2 | B2 |   4.81804617841164 |
|       5 |       4 |       3 | A1 | B1 |   1.51569797693389 |
|       5 |       4 |       4 | A1 | B1 |   -1.1999307081188 |
|       5 |       4 |       5 | A1 | B2 |  0.926871657121788 |
|       5 |       4 |       6 | A1 | B2 |  -3.71646305404236 |
|       5 |       4 |       7 | A2 | B1 |   1.30292996973742 |
|       5 |       4 |       8 | A2 | B1 |   2.27357042368619 |
|       6 |       1 |       1 | A1 | B1 |   5.66973960806689 |
|       6 |       1 |       2 | A1 | B1 |    2.8324339772699 |
|       6 |       1 |       3 | A1 | B2 |   2.39408571976713 |
|       6 |       1 |       4 | A1 | B2 |   1.68666453449319 |
|       6 |       1 |       5 | A2 | B1 |   1.99039055282929 |
|       6 |       1 |       6 | A2 | B1 |   1.50218708032942 |
|       6 |       1 |       7 | A2 | B2 |   5.97196059545309 |
|       6 |       1 |       8 | A2 | B2 |   4.23295289723905 |
|       7 |       2 |       1 | A1 | B2 |   2.51200640443188 |
|       7 |       2 |       2 | A1 | B2 |    3.1162896992602 |
|       7 |       2 |       3 | A2 | B1 |  0.854473669612889 |
|       7 |       2 |       4 | A2 | B1 |   5.23816718744868 |
|       7 |       2 |       5 | A2 | B2 |   4.56751544726568 |
|       7 |       2 |       6 | A2 | B2 |  0.816442836629361 |
|       7 |       2 |       7 | A1 | B1 |  0.150720429062987 |
|       7 |       2 |       8 | A1 | B1 |   1.27741954236188 |
|       8 |       3 |       1 | A2 | B1 |   2.79555303427646 |
|       8 |       3 |       2 | A2 | B1 |  -2.83712894684174 |
|       8 |       3 |       3 | A2 | B2 |  0.452428781661049 |
|       8 |       3 |       4 | A2 | B2 |   1.10214632716916 |
|       8 |       3 |       5 | A1 | B1 | -0.502427439759417 |
|       8 |       3 |       6 | A1 | B1 |  -3.38898278899096 |
|       8 |       3 |       7 | A1 | B2 |   2.26205407460408 |
|       8 |       3 |       8 | A1 | B2 |   -1.5220473321854 |

** Identifying the model formula to be used in mixed-effects modeling

Simultaneous sampling of subjects and items can lead to complicated dependencies (see [[http://www.ncbi.nlm.nih.gov/pmc/articles/PMC3881361][Barr, Levy, Scheepers, and Tily, 2013]]).  One appealing way to account for these dependencies is through linear mixed-effects modeling, which can be accomplished using the lme4 package in R.  The function =design_formula()= in funfact gives you the model formula that is appropriate for analyzed the data in your sample.

#+BEGIN_SRC R :results output
  design_formula(threeway, n_subj = 16)
#+END_SRC

#+RESULTS:
: ~Novelty * Addressee * Feedback + (1 + Novelty * Feedback | subj_id) + 
:     (1 + Novelty * Addressee | item_id)



